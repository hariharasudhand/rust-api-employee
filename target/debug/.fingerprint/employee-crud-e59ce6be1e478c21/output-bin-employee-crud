{"$message_type":"diagnostic","message":"future cannot be sent between threads safely","code":null,"level":"error","spans":[{"file_name":"src/main.rs","byte_start":569,"byte_end":615,"line_start":29,"line_end":29,"column_start":1,"column_end":47,"is_primary":true,"text":[{"text":"#[post(\"/employees\", data = \"<new_employee>\")]","highlight_start":1,"highlight_end":47}],"label":"future created by async block is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":569,"byte_end":615,"line_start":29,"line_end":29,"column_start":1,"column_end":47,"is_primary":false,"text":[{"text":"#[post(\"/employees\", data = \"<new_employee>\")]","highlight_start":1,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[post]","def_site_span":{"file_name":"/Users/harid/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rocket_codegen-0.5.1/src/lib.rs","byte_start":10297,"byte_end":10363,"line_start":275,"line_end":275,"column_start":9,"column_end":75,"is_primary":false,"text":[{"text":"        pub fn $name(args: TokenStream, input: TokenStream) -> TokenStream {","highlight_start":9,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"within `{async block@src/main.rs:29:1: 29:47}`, the trait `std::marker::Send` is not implemented for `std::sync::MutexGuard<'_, HashMap<std::string::String, Employee>>`, which is required by `{async block@src/main.rs:29:1: 29:47}: std::marker::Send`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"future is not `Send` as this value is used across an await","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":1044,"byte_end":1049,"line_start":43,"line_end":43,"column_start":23,"column_end":28,"is_primary":true,"text":[{"text":"    save_to_file(&db).await;","highlight_start":23,"highlight_end":28}],"label":"await occurs here, with `mut db` maybe used later","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":1044,"byte_end":1049,"line_start":43,"line_end":43,"column_start":23,"column_end":28,"is_primary":false,"text":[{"text":"    save_to_file(&db).await;","highlight_start":23,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":727,"byte_end":733,"line_start":31,"line_end":31,"column_start":9,"column_end":15,"is_primary":false,"text":[{"text":"    let mut db = state.lock().unwrap();","highlight_start":9,"highlight_end":15}],"label":"has type `std::sync::MutexGuard<'_, HashMap<std::string::String, Employee>>` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required for the cast from `Pin<Box<{async block@src/main.rs:29:1: 29:47}>>` to `Pin<Box<dyn std::future::Future<Output = Outcome<rocket::Response<'_>, Status, (rocket::Data<'_>, Status)>> + std::marker::Send>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: future cannot be sent between threads safely\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:29:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[post(\"/employees\", data = \"<new_employee>\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfuture created by async block is not `Send`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: within `{async block@src/main.rs:29:1: 29:47}`, the trait `std::marker::Send` is not implemented for `std::sync::MutexGuard<'_, HashMap<std::string::String, Employee>>`, which is required by `{async block@src/main.rs:29:1: 29:47}: std::marker::Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: future is not `Send` as this value is used across an await\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:43:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut db = state.lock().unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhas type `std::sync::MutexGuard<'_, HashMap<std::string::String, Employee>>` which is not `Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    save_to_file(&db).await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mawait occurs here, with `mut db` maybe used later\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for the cast from `Pin<Box<{async block@src/main.rs:29:1: 29:47}>>` to `Pin<Box<dyn std::future::Future<Output = Outcome<rocket::Response<'_>, Status, (rocket::Data<'_>, Status)>> + std::marker::Send>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `post` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"future cannot be sent between threads safely","code":null,"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1545,"byte_end":1573,"line_start":60,"line_end":60,"column_start":1,"column_end":29,"is_primary":true,"text":[{"text":"#[delete(\"/employees/<id>\")]","highlight_start":1,"highlight_end":29}],"label":"future created by async block is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":1545,"byte_end":1573,"line_start":60,"line_end":60,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"#[delete(\"/employees/<id>\")]","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[delete]","def_site_span":{"file_name":"/Users/harid/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rocket_codegen-0.5.1/src/lib.rs","byte_start":10297,"byte_end":10363,"line_start":275,"line_end":275,"column_start":9,"column_end":75,"is_primary":false,"text":[{"text":"        pub fn $name(args: TokenStream, input: TokenStream) -> TokenStream {","highlight_start":9,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"within `{async block@src/main.rs:60:1: 60:29}`, the trait `std::marker::Send` is not implemented for `std::sync::MutexGuard<'_, HashMap<std::string::String, Employee>>`, which is required by `{async block@src/main.rs:60:1: 60:29}: std::marker::Send`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"future is not `Send` as this value is used across an await","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":1735,"byte_end":1740,"line_start":64,"line_end":64,"column_start":23,"column_end":28,"is_primary":true,"text":[{"text":"    save_to_file(&db).await;","highlight_start":23,"highlight_end":28}],"label":"await occurs here, with `mut db` maybe used later","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":1735,"byte_end":1740,"line_start":64,"line_end":64,"column_start":23,"column_end":28,"is_primary":false,"text":[{"text":"    save_to_file(&db).await;","highlight_start":23,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":1661,"byte_end":1667,"line_start":62,"line_end":62,"column_start":9,"column_end":15,"is_primary":false,"text":[{"text":"    let mut db = state.lock().unwrap();","highlight_start":9,"highlight_end":15}],"label":"has type `std::sync::MutexGuard<'_, HashMap<std::string::String, Employee>>` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required for the cast from `Pin<Box<{async block@src/main.rs:60:1: 60:29}>>` to `Pin<Box<dyn std::future::Future<Output = Outcome<rocket::Response<'_>, Status, (rocket::Data<'_>, Status)>> + std::marker::Send>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: future cannot be sent between threads safely\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:60:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[delete(\"/employees/<id>\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfuture created by async block is not `Send`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: within `{async block@src/main.rs:60:1: 60:29}`, the trait `std::marker::Send` is not implemented for `std::sync::MutexGuard<'_, HashMap<std::string::String, Employee>>`, which is required by `{async block@src/main.rs:60:1: 60:29}: std::marker::Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: future is not `Send` as this value is used across an await\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:64:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut db = state.lock().unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhas type `std::sync::MutexGuard<'_, HashMap<std::string::String, Employee>>` which is not `Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    db.remove(&id);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    save_to_file(&db).await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mawait occurs here, with `mut db` maybe used later\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for the cast from `Pin<Box<{async block@src/main.rs:60:1: 60:29}>>` to `Pin<Box<dyn std::future::Future<Output = Outcome<rocket::Response<'_>, Status, (rocket::Data<'_>, Status)>> + std::marker::Send>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `delete` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
